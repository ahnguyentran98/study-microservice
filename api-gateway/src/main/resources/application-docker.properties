# Docker-specific configuration for api-gateway
# Server Configuration
server.port=8080
spring.application.name=api-gateway

# Gateway Routes Configuration (Docker service names)
# User Service Routes
spring.cloud.gateway.routes[0].id=user-service
spring.cloud.gateway.routes[0].uri=${USER_SERVICE_URL:http://user-service-app:8080}
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/users/**
spring.cloud.gateway.routes[0].filters[0]=CircuitBreaker=user-service,forward:/fallback

# Product Service Routes
spring.cloud.gateway.routes[1].id=product-service
spring.cloud.gateway.routes[1].uri=${PRODUCT_SERVICE_URL:http://product-service:8080}
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/products/**
spring.cloud.gateway.routes[1].filters[0]=CircuitBreaker=product-service,forward:/fallback

# Order Service Routes
spring.cloud.gateway.routes[2].id=order-service
spring.cloud.gateway.routes[2].uri=${ORDER_SERVICE_URL:http://order-service:8080}
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/orders/**
spring.cloud.gateway.routes[2].filters[0]=CircuitBreaker=order-service,forward:/fallback

# Payment Service Routes
spring.cloud.gateway.routes[3].id=payment-service
spring.cloud.gateway.routes[3].uri=${PAYMENT_SERVICE_URL:http://payment-service:8080}
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/payments/**
spring.cloud.gateway.routes[3].filters[0]=CircuitBreaker=payment-service,forward:/fallback

# Notification Service Routes
spring.cloud.gateway.routes[4].id=notification-service
spring.cloud.gateway.routes[4].uri=${NOTIFICATION_SERVICE_URL:http://notification-service:8080}
spring.cloud.gateway.routes[4].predicates[0]=Path=/api/notifications/**
spring.cloud.gateway.routes[4].filters[0]=CircuitBreaker=notification-service,forward:/fallback

# CORS Configuration
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedOriginPatterns=*
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedMethods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedHeaders=*
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowCredentials=false
spring.cloud.gateway.globalcors.cors-configurations.[/**].maxAge=3600

# Discovery Configuration
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Circuit Breaker Configuration
resilience4j.circuitbreaker.instances.user-service.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.user-service.slidingWindowSize=10
resilience4j.circuitbreaker.instances.user-service.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.user-service.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.user-service.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.user-service.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.user-service.failureRateThreshold=50
resilience4j.circuitbreaker.instances.user-service.eventConsumerBufferSize=10

resilience4j.circuitbreaker.instances.product-service.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.product-service.slidingWindowSize=10
resilience4j.circuitbreaker.instances.product-service.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.product-service.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.product-service.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.product-service.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.product-service.failureRateThreshold=50
resilience4j.circuitbreaker.instances.product-service.eventConsumerBufferSize=10

resilience4j.circuitbreaker.instances.order-service.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.order-service.slidingWindowSize=10
resilience4j.circuitbreaker.instances.order-service.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.order-service.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.order-service.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.order-service.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.order-service.failureRateThreshold=50
resilience4j.circuitbreaker.instances.order-service.eventConsumerBufferSize=10

resilience4j.circuitbreaker.instances.payment-service.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.payment-service.slidingWindowSize=10
resilience4j.circuitbreaker.instances.payment-service.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.payment-service.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.payment-service.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.payment-service.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.payment-service.failureRateThreshold=50
resilience4j.circuitbreaker.instances.payment-service.eventConsumerBufferSize=10

resilience4j.circuitbreaker.instances.notification-service.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.notification-service.slidingWindowSize=10
resilience4j.circuitbreaker.instances.notification-service.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.notification-service.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.notification-service.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.notification-service.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.notification-service.failureRateThreshold=50
resilience4j.circuitbreaker.instances.notification-service.eventConsumerBufferSize=10

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,gateway
management.endpoint.health.show-details=always
management.endpoint.gateway.enabled=true
management.server.port=8080

# JWT Configuration
jwt.secret=${JWT_SECRET:mySecretKey123456789012345678901234567890}
jwt.expiration=${JWT_EXPIRATION:86400000}

# Logging Configuration
logging.level.com.microservices.apigateway=INFO
logging.level.org.springframework.cloud.gateway=INFO
logging.level.org.springframework.web.reactive=INFO

# Docker-specific optimizations
spring.main.lazy-initialization=false

# DevTools configuration for hot reload
spring.devtools.restart.enabled=true
spring.devtools.restart.additional-paths=src/main/java
spring.devtools.restart.poll-interval=1000
spring.devtools.restart.quiet-period=400
spring.devtools.livereload.enabled=true
spring.devtools.remote.secret=mysecret
