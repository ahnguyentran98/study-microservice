services:
  # Database
  user-db:
    image: postgres:13
    container_name: api-gateway-user-db
    environment:
      POSTGRES_DB: user_service_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
      - ../z-init-db/user_service_db.sql:/docker-entrypoint-initdb.d/user_service_db.sql
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d user_service_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service (for testing API Gateway)
  user-service:
    build: ../user-service
    container_name: api-gateway-user-service
    ports:
      - "8081:8080"
    depends_on:
      user-db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db:5432/user_service_db
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API Gateway
  api-gateway:
    build: .
    container_name: api-gateway-app
    ports:
      - "8080:8080"
    depends_on:
      user-service:
        condition: service_healthy
    environment:
      - USER_SERVICE_URL=http://user-service:8080
      - PRODUCT_SERVICE_URL=http://product-service:8080
      - ORDER_SERVICE_URL=http://order-service:8080
      - PAYMENT_SERVICE_URL=http://payment-service:8080
      - NOTIFICATION_SERVICE_URL=http://notification-service:8080
      - JWT_SECRET=mySecretKey123456789012345678901234567890
      - JWT_EXPIRATION=86400000
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  user_db_data:

networks:
  microservices-network:
    driver: bridge
